import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Flatten, Conv2D, MaxPooling2D
from tensorflow.keras.preprocessing.image import ImageDataGenerator
import json
import os

# 데이터 전처리
train_dir = os.path.join(base_path, 'train')
validation_dir = os.path.join(base_path, 'validation')

datagen = ImageDataGenerator(rescale=1./255)
train_generator = datagen.flow_from_directory(
    train_dir,
    target_size=(224, 224),
    batch_size=32,
    class_mode='categorical'
)

validation_generator = datagen.flow_from_directory(
    validation_dir,
    target_size=(224, 224),
    batch_size=32,
    class_mode='categorical'
)

# 클래스 인덱스를 클래스 이름으로 매핑
class_indices = train_generator.class_indices
class_indices = {v: k for k, v in class_indices.items()}

# 매핑을 파일에 저장
with open('class_indices.json', 'w') as f:
    json.dump(class_indices, f)

# 모델 정의
model = Sequential([
    Conv2D(32, (3, 3), activation='relu', input_shape=(224, 224, 3)),
    MaxPooling2D((2, 2)),
    Flatten(),
    Dense(128, activation='relu'),
    Dense(train_generator.num_classes, activation='softmax')
])

# 모델 컴파일
model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

# 모델 학습
model.fit(train_generator, epochs=10, validation_data=validation_generator)

# 모델 저장
model.save('trained_model.h5')

import tkinter as tk
from tkinter import filedialog, Label, Button
from PIL import Image, ImageTk, ImageFilter
import numpy as np
import tensorflow as tf
from tensorflow.keras.models import load_model
import json

# 클래스 인덱스 로드
with open('class_indices.json', 'r') as f:
    class_indices = json.load(f)

# 딥러닝 모델 로드
model = load_model('trained_model.h5')

# 이미지 분류 함수
def classify_image(image_path):
    img = Image.open(image_path)
    img = img.resize((224, 224))
    img_array = np.array(img) / 255.0
    img_array = np.expand_dims(img_array, axis=0)
    predictions = model.predict(img_array)
    class_idx = np.argmax(predictions)
    class_name = class_indices[str(class_idx)]
    return class_name

# 이미지 필터 함수
def apply_filter(image, filter_type):
    if filter_type == "BLUR":
        return image.filter(ImageFilter.BLUR)
    elif filter_type == "CONTOUR":
        return image.filter(ImageFilter.CONTOUR)
    elif filter_type == "DETAIL":
        return image.filter(ImageFilter.DETAIL)
    return image

# 이미지 열기 및 분류
def open_and_classify_image():
    file_path = filedialog.askopenfilename()
    if file_path:
        class_name = classify_image(file_path)
        class_label.config(text=f'Class: {class_name}')
        original_image = Image.open(file_path)
        display_image(original_image, original_label)
        global img
        img = original_image

# 이미지 표시
def display_image(image, label):
    img_tk = ImageTk.PhotoImage(image)
    label.config(image=img_tk)
    label.image = img_tk

# 필터 적용 버튼 클릭 핸들러
def apply_filter_button(filter_type):
    global img
    filtered_image = apply_filter(img, filter_type)
    display_image(filtered_image, filtered_label)

# Tkinter 설정
root = tk.Tk()
root.title("Image Classification and Filter Application")

# 위젯 배치
class_label = Label(root, text="Class: None")
class_label.pack()

original_label = Label(root)
original_label.pack()

filtered_label = Label(root)
filtered_label.pack()

open_button = Button(root, text="Open Image", command=open_and_classify_image)
open_button.pack()

# 필터 버튼들
blur_button = Button(root, text="Blur", command=lambda: apply_filter_button("BLUR"))
blur_button.pack()

contour_button = Button(root, text="Contour", command=lambda: apply_filter_button("CONTOUR"))
contour_button.pack()

detail_button = Button(root, text="Detail", command=lambda: apply_filter_button("DETAIL"))
detail_button.pack()

root.mainloop()
